Private isAutomatedUpdate As Boolean ' Flag to suppress events during automation

Private Sub Worksheet_Change(ByVal Target As Range)
    Dim saveDataTable As ListObject
    Dim iso16889Table As ListObject
    Dim changedTable As ListObject
    
    ' CRITICAL: Exit immediately if this is an automated update
    If isAutomatedUpdate Then Exit Sub
    
    ' CRITICAL: Only trigger for specific columns that users should edit
    If Not IsUserEditableRange(Target) Then Exit Sub
    
    On Error GoTo ErrorHandler
    
    ' Prevent recursive calls
    Application.EnableEvents = False
    
    ' Check which table was modified
    Set changedTable = Nothing
    
    ' Check SaveDataTable
    On Error Resume Next
    Set saveDataTable = Me.ListObjects("SaveDataTable")
    If Not saveDataTable Is Nothing Then
        If Not Intersect(Target, saveDataTable.Range) Is Nothing Then
            Set changedTable = saveDataTable
        End If
    End If
    
    ' Check ISO16889SaveDataTable
    Set iso16889Table = Me.ListObjects("ISO16889SaveDataTable")
    If Not iso16889Table Is Nothing And changedTable Is Nothing Then
        If Not Intersect(Target, iso16889Table.Range) Is Nothing Then
            Set changedTable = iso16889Table
        End If
    End If
    On Error GoTo ErrorHandler
    
    ' If a SaveData table was changed, handle the update
    If Not changedTable Is Nothing Then
        Call HandleSaveDataChange(Target, changedTable)
    End If
    
    Application.EnableEvents = True
    Exit Sub
    
ErrorHandler:
    Application.EnableEvents = True
    Debug.Print "Error in Worksheet_Change: " & Err.Description
End Sub

' Simplified - only allow changes to user-editable columns
Private Function IsUserEditableRange(Target As Range) As Boolean
    Dim saveDataTable As ListObject
    Dim iso16889Table As ListObject
    
    IsUserEditableRange = False
    
    On Error Resume Next
    
    ' Check SaveDataTable columns
    Set saveDataTable = Me.ListObjects("SaveDataTable")
    If Not saveDataTable Is Nothing Then
        If Not Intersect(Target, saveDataTable.Range) Is Nothing Then
            ' Allow edits to columns 3, 4, 5 (Report Value, User Entry, Custom Default)
            If Target.Column >= saveDataTable.Range.Column + 2 And _
               Target.Column <= saveDataTable.Range.Column + 4 Then
                IsUserEditableRange = True
                Exit Function
            End If
        End If
    End If
    
    ' Check ISO16889SaveDataTable columns
    Set iso16889Table = Me.ListObjects("ISO16889SaveDataTable")
    If Not iso16889Table Is Nothing Then
        If Not Intersect(Target, iso16889Table.Range) Is Nothing Then
            If Target.Column >= iso16889Table.Range.Column + 2 And _
               Target.Column <= iso16889Table.Range.Column + 4 Then
                IsUserEditableRange = True
                Exit Function
            End If
        End If
    End If
    
    On Error GoTo 0
End Function

' PUBLIC: Call this before automated updates to suppress change events
Public Sub BeginAutomatedUpdate()
    isAutomatedUpdate = True
End Sub

' PUBLIC: Call this after automated updates to re-enable change events
Public Sub EndAutomatedUpdate()
    isAutomatedUpdate = False
End Sub

' Simplified change handling - no automatic conversions
Private Sub HandleSaveDataChange(ByVal Target As Range, ByVal changedTable As ListObject)
    Dim changedRow As Long
    Dim changedCol As Long
    Dim changedID As Long
    Dim columnHeader As String
    Dim newValue As Variant
    Dim isISO16889Table As Boolean
    
    ' Determine which table and get basic info
    isISO16889Table = (changedTable.Name = "ISO16889SaveDataTable")
    
    ' Get row and column within the table
    changedRow = Target.Row - changedTable.HeaderRowRange.Row
    changedCol = Target.Column - changedTable.Range.Column + 1
    
    ' Skip header row changes
    If changedRow <= 0 Then Exit Sub
    
    ' Get the ID and column header
    changedID = changedTable.DataBodyRange(changedRow, 1).Value ' Assuming ID is column 1
    columnHeader = changedTable.HeaderRowRange(changedCol).Value
    newValue = Target.Value
    
    ' Only handle ISO16889 User Entry changes that affect analysis
    If isISO16889Table And columnHeader = "User Entry" Then
        Call HandleISO16889UserEntry(changedID, newValue)
    End If
    
    ' Log the change for audit trail
    Call LogDataChange(columnHeader, changedID, newValue, isISO16889Table)
End Sub

' Simplified ISO16889 handling - validate and prompt for rebuild if needed
Private Sub HandleISO16889UserEntry(ID As Long, newValue As Variant)
    Select Case ID
        Case 2 ' Termination DP override
            If IsNumeric(newValue) And newValue <> "" Then
                If ValidateDPOverride(CDbl(newValue)) Then
                    Call PromptForRebuildIfNeeded("DP override")
                End If
            End If
        Case 7 ' Filter selection
            If IsNumeric(newValue) And newValue <> "" Then
                If ValidateFilterSelection(CInt(newValue)) Then
                    Call PromptForRebuildIfNeeded("filter selection")
                End If
            End If
        Case 8 ' Sensor selection
            If newValue <> "" Then
                Call ValidateSensorSelection(CStr(newValue))
                ' Sensor changes don't require rebuild - just display update
            End If
    End Select
End Sub

' Simplified validation - just validate, don't auto-correct
Private Function ValidateDPOverride(newDP As Double) As Boolean
    If ISO16889Mod.ISO16889ReportData Is Nothing Then
        ValidateDPOverride = True
        Exit Function
    End If
    
    If ISO16889Mod.ISO16889ReportData.IsValidDPOverride(newDP) Then
        ValidateDPOverride = True
        Call ISO16889Mod.ISO16889ReportData.InvalidateCache
    Else
        Dim actualDP As Double
        actualDP = ISO16889Mod.ISO16889ReportData.GetActualTerminationDP()
        
        MsgBox "Invalid DP override: " & newDP & vbCrLf & vbCrLf & _
               "Maximum allowed: " & actualDP & vbCrLf & _
               "You can only trim data to a lower termination point.", _
               vbExclamation, "Invalid DP Override"
        ValidateDPOverride = False
    End If
End Function

Private Function ValidateFilterSelection(newFilter As Integer) As Boolean
    If ISO16889Mod.ISO16889ReportData Is Nothing Then
        ValidateFilterSelection = True
        Exit Function
    End If
    
    If ISO16889Mod.ISO16889ReportData.IsValidFilterChoice(newFilter) Then
        ValidateFilterSelection = True
        Call ISO16889Mod.ISO16889ReportData.InvalidateCache
    Else
        Dim availableFilters As String
        availableFilters = ISO16889Mod.ISO16889ReportData.GetAvailableFilterOptions()
        
        MsgBox "Filter " & newFilter & " is not available." & vbCrLf & _
               "Available filters: " & availableFilters, _
               vbExclamation, "Invalid Filter Selection"
        ValidateFilterSelection = False
    End If
End Function

Private Function ValidateSensorSelection(newSensor As String) As Boolean
    If ISO16889Mod.ISO16889ReportData Is Nothing Then
        ValidateSensorSelection = True
        Exit Function
    End If
    
    If ISO16889Mod.ISO16889ReportData.IsValidSensorChoice(newSensor) Then
        ValidateSensorSelection = True
        
        ' ENHANCED: Update the class property (was missing before)
        ISO16889Mod.ISO16889ReportData.TerminationSizePhrase = newSensor
        
        ' NEW: Trigger beta value updates in SaveData table
        Call UpdateBetaValuesForSensorChange(newSensor)
        
        MsgBox "Sensor selection updated to " & newSensor & "." & vbCrLf & _
               "Beta size values have been recalculated.", _
               vbInformation, "Sensor Updated"
    Else
        Dim availableSensors As String
        availableSensors = ISO16889Mod.ISO16889ReportData.GetAvailableSensorOptions()
        
        MsgBox "Sensor '" & newSensor & "' is not available." & vbCrLf & _
               "Available sensors: " & availableSensors, _
               vbExclamation, "Invalid Sensor Selection"
        ValidateSensorSelection = False
    End If
End Function

Private Sub UpdateBetaValuesForSensorChange(newSensor As String)
    ' CRITICAL: Suppress change events during automated updates
    Call BeginAutomatedUpdate  ' Use your existing method
    
    On Error GoTo CleanupEvents
    
    ' Recalculate all beta size values for the new sensor
    Dim betaTargets As Variant
    betaTargets = Array(2, 10, 75, 100, 200, 1000) ' Standard ISO 16889 beta levels
    
    Dim i As Long
    For i = 0 To UBound(betaTargets)
        Dim betaValue As Double
        Dim sizeResult As String
        Dim saveDataID As Long
        
        betaValue = betaTargets(i)
        saveDataID = 9 + i  ' IDs 9-14 for beta sizes
        
        ' Calculate size for this beta using the NEW sensor
        sizeResult = ISO16889ClassMod.GetISO16889SizeGivenBeta(betaValue)
        
        ' Update the From Data column with new calculation
        Call ISO16889Mod.SetISO16889DataEntry(saveDataID, sizeResult)
        
        Debug.Print "Updated Beta " & betaValue & " size to: " & sizeResult & " (Sensor: " & newSensor & ")"
    Next i
    
CleanupEvents:
    Call EndAutomatedUpdate  ' Use your existing method
    If Err.Number <> 0 Then
        MsgBox "Error updating beta values: " & Err.Description, vbCritical
    End If
End Sub

' Simple rebuild prompt - let user decide
Private Sub PromptForRebuildIfNeeded(changeType As String)
    Dim result As VbMsgBoxResult
    
    result = MsgBox("Your " & changeType & " change affects the analysis." & vbCrLf & _
                   "Rebuild analysis now?", vbYesNo + vbQuestion, "Rebuild Analysis?")
    
    If result = vbYes Then
        Call ISO16889Mod.ForceRebuildAnalysis
    End If
End Sub

' Simplified audit trail logging
Private Sub LogDataChange(changeType As String, ID As Long, newValue As Variant, isISO16889 As Boolean)
    Dim tableType As String
    tableType = IIf(isISO16889, "ISO16889", "SaveData")
    Debug.Print Now & " - " & tableType & " ID " & ID & " - " & changeType & " = " & newValue
End Sub
