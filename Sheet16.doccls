Option Explicit
' Save_Data Worksheet Module - Consolidated and Enhanced

Private isAutomatedUpdate As Boolean ' Flag to suppress events during automation

'======================================================================
'================== MAIN WORKSHEET CHANGE HANDLER ==================
'======================================================================

Private Sub Worksheet_Change(ByVal Target As Range)
    Dim saveDataTable As ListObject
    Dim iso16889Table As ListObject
    Dim changedTable As ListObject
    
    ' CRITICAL: Exit immediately if this is an automated update
    If isAutomatedUpdate Then Exit Sub
    
    ' CRITICAL: Only trigger for specific columns that users should edit
    If Not IsUserEditableRange(Target) Then Exit Sub
    
    On Error GoTo ErrorHandler
    
    ' Prevent recursive calls
    Application.EnableEvents = False
    
    ' Check which table was modified
    Set changedTable = Nothing
    
    ' Check SaveDataTable
    On Error Resume Next
    Set saveDataTable = Me.ListObjects("SaveDataTable")
    If Not saveDataTable Is Nothing Then
        If Not Intersect(Target, saveDataTable.Range) Is Nothing Then
            Set changedTable = saveDataTable
        End If
    End If
    
    ' Check ISO16889SaveDataTable
    Set iso16889Table = Me.ListObjects("ISO16889SaveDataTable")
    If Not iso16889Table Is Nothing And changedTable Is Nothing Then
        If Not Intersect(Target, iso16889Table.Range) Is Nothing Then
            Set changedTable = iso16889Table
        End If
    End If
    On Error GoTo ErrorHandler
    
    ' If a SaveData table was changed, handle the update
    If Not changedTable Is Nothing Then
        Call HandleSaveDataChange(Target, changedTable)
    End If
    
    Application.EnableEvents = True
    Exit Sub
    
ErrorHandler:
    Application.EnableEvents = True
    Debug.Print "Error in Worksheet_Change: " & Err.Description
End Sub

'======================================================================
'================== RANGE VALIDATION AND EVENT CONTROL ==============
'======================================================================

' Simplified - only allow changes to user-editable columns
Private Function IsUserEditableRange(Target As Range) As Boolean
    Dim saveDataTable As ListObject
    Dim iso16889Table As ListObject
    
    IsUserEditableRange = False
    
    On Error Resume Next
    
    ' Check SaveDataTable columns
    Set saveDataTable = Me.ListObjects("SaveDataTable")
    If Not saveDataTable Is Nothing Then
        If Not Intersect(Target, saveDataTable.Range) Is Nothing Then
            ' Allow edits to columns 3, 4, 5 (Report Value, User Entry, Custom Default)
            If Target.Column >= saveDataTable.Range.Column + 2 And _
               Target.Column <= saveDataTable.Range.Column + 4 Then
                IsUserEditableRange = True
                Exit Function
            End If
        End If
    End If
    
    ' Check ISO16889SaveDataTable columns
    Set iso16889Table = Me.ListObjects("ISO16889SaveDataTable")
    If Not iso16889Table Is Nothing Then
        If Not Intersect(Target, iso16889Table.Range) Is Nothing Then
            If Target.Column >= iso16889Table.Range.Column + 2 And _
               Target.Column <= iso16889Table.Range.Column + 4 Then
                IsUserEditableRange = True
                Exit Function
            End If
        End If
    End If
    
    On Error GoTo 0
End Function

' PUBLIC: Call this before automated updates to suppress change events
Public Sub BeginAutomatedUpdate()
    isAutomatedUpdate = True
End Sub

' PUBLIC: Call this after automated updates to re-enable change events
Public Sub EndAutomatedUpdate()
    isAutomatedUpdate = False
End Sub

'======================================================================
'================== CHANGE HANDLING LOGIC ===========================
'======================================================================

' Simplified change handling - no automatic conversions
Private Sub HandleSaveDataChange(ByVal Target As Range, ByVal changedTable As ListObject)
    Dim changedRow As Long
    Dim changedCol As Long
    Dim changedID As Long
    Dim columnHeader As String
    Dim newValue As Variant
    Dim isISO16889Table As Boolean
    
    ' Determine which table and get basic info
    isISO16889Table = (changedTable.Name = "ISO16889SaveDataTable")
    
    ' Get row and column within the table
    changedRow = Target.Row - changedTable.HeaderRowRange.Row
    changedCol = Target.Column - changedTable.Range.Column + 1
    
    ' Skip header row changes
    If changedRow <= 0 Then Exit Sub
    
    ' Get the ID and column header
    changedID = changedTable.DataBodyRange(changedRow, 1).value ' Assuming ID is column 1
    columnHeader = changedTable.HeaderRowRange(changedCol).value
    newValue = Target.value
    
    ' Only handle ISO16889 User Entry changes that affect analysis
    If isISO16889Table And columnHeader = "User Entry" Then
        Call HandleISO16889UserEntry(changedID, newValue)
    End If
    
    ' Log the change for audit trail
    Call LogDataChange(columnHeader, changedID, newValue, isISO16889Table)
End Sub

'======================================================================
'================== ISO16889 SPECIFIC HANDLING ======================
'======================================================================

' CONSOLIDATED: Single function to handle all ISO16889 user entries
Private Sub HandleISO16889UserEntry(ID As Long, newValue As Variant)
    ' Safety check for empty/null values
    If IsEmpty(newValue) Or IsNull(newValue) Then
        Debug.Print "ISO16889 User Entry is Empty/Null for ID " & ID
        Exit Sub
    End If
    
    Select Case ID
        Case 2 ' Termination DP override
            Call HandleDPOverride(newValue)
        Case 7 ' Filter selection
            Call HandleFilterOverride(newValue)
        Case 8 ' Sensor selection
            Call HandleSensorOverride(newValue)
        Case Else
            Debug.Print "ISO16889 User Entry changed for ID " & ID & " (no special handling required)"
    End Select
End Sub

' CONSOLIDATED: DP override handling with comprehensive validation
Private Sub HandleDPOverride(newValue As Variant)
    ' Convert to string first for safety
    Dim dpString As String
    dpString = CStr(newValue)
    
    ' Check if it's actually numeric
    If Not IsNumeric(dpString) Or Trim(dpString) = "" Then
        Debug.Print "DP override is not numeric: " & dpString
        Exit Sub
    End If
    
    ' Convert to double
    Dim dpValue As Double
    dpValue = CDbl(dpString)
    
    ' Check for zero or negative values (silently ignore)
    If dpValue <= 0 Then
        Debug.Print "DP override is zero or negative: " & dpValue & " (ignoring)"
        Exit Sub
    End If
    
    ' Validate with ISO16889 system
    If ISO16889Mod.ISO16889ReportData Is Nothing Then Exit Sub
    
    If ISO16889Mod.ISO16889ReportData.IsValidDPOverride(dpValue) Then
        Call ISO16889Mod.ISO16889ReportData.InvalidateCache
        Call PromptForRebuildIfNeeded("DP override")
    Else
        Dim actualDP As Double
        actualDP = ISO16889Mod.ISO16889ReportData.GetActualTerminationDP()
        
        MsgBox "Invalid DP override: " & dpValue & vbCrLf & vbCrLf & _
               "Maximum allowed: " & actualDP & vbCrLf & _
               "You can only trim data to a lower termination point.", _
               vbExclamation, "Invalid DP Override"
    End If
End Sub

' CONSOLIDATED: Filter override handling with comprehensive validation
Private Sub HandleFilterOverride(newValue As Variant)
    ' Convert to string first for safety
    Dim filterString As String
    filterString = CStr(newValue)
    
    ' Check if it's actually numeric
    If Not IsNumeric(filterString) Or Trim(filterString) = "" Then
        Debug.Print "Filter override is not numeric: " & filterString
        Exit Sub
    End If
    
    ' Convert to integer
    Dim filterValue As Integer
    filterValue = CInt(filterString)
    
    ' Check for zero or negative values (silently ignore)
    If filterValue <= 0 Then
        Debug.Print "Filter override is zero or negative: " & filterValue & " (ignoring)"
        Exit Sub
    End If
    
    ' Validate with ISO16889 system
    If ISO16889Mod.ISO16889ReportData Is Nothing Then Exit Sub
    
    If ISO16889Mod.ISO16889ReportData.IsValidFilterChoice(filterValue) Then
        Call ISO16889Mod.ISO16889ReportData.InvalidateCache
        Call PromptForRebuildIfNeeded("filter selection")
    Else
        Dim availableFilters As String
        availableFilters = ISO16889Mod.ISO16889ReportData.GetAvailableFilterOptions()
        
        MsgBox "Filter " & filterValue & " is not available." & vbCrLf & _
               "Available filters: " & availableFilters, _
               vbExclamation, "Invalid Filter Selection"
    End If
End Sub

' CONSOLIDATED: Sensor override handling with beta value updates
Private Sub HandleSensorOverride(newValue As Variant)
    ' Convert to string safely
    Dim sensorValue As String
    sensorValue = CStr(newValue)
    
    ' Check for empty string (silently ignore)
    If Trim(sensorValue) = "" Then
        Debug.Print "Sensor override is empty string (ignoring)"
        Exit Sub
    End If
    
    ' Validate with ISO16889 system
    If ISO16889Mod.ISO16889ReportData Is Nothing Then Exit Sub
    
    If ISO16889Mod.ISO16889ReportData.IsValidSensorChoice(sensorValue) Then
        ' Update the class property
        ISO16889Mod.ISO16889ReportData.TerminationSizePhrase = sensorValue
        
        ' Trigger beta value updates in SaveData table
        Call UpdateBetaValuesForSensorChange(sensorValue)
        
        MsgBox "Sensor selection updated to " & sensorValue & "." & vbCrLf & _
               "Beta size values have been recalculated.", _
               vbInformation, "Sensor Updated"
    Else
        Dim availableSensors As String
        availableSensors = ISO16889Mod.ISO16889ReportData.GetAvailableSensorOptions()
        
        MsgBox "Sensor '" & sensorValue & "' is not available." & vbCrLf & _
               "Available sensors: " & availableSensors, _
               vbExclamation, "Invalid Sensor Selection"
    End If
End Sub

'======================================================================
'================== BETA SIZE RECALCULATION =========================
'======================================================================

Private Sub UpdateBetaValuesForSensorChange(newSensor As String)
    ' CRITICAL: Suppress change events during automated updates
    Call BeginAutomatedUpdate
    
    On Error GoTo CleanupEvents
    
    Debug.Print "Recalculating beta sizes for sensor change to: " & newSensor
    
    ' Force recalculation of beta sizes with new sensor
    Call ISO16889Mod.ISO16889ReportData.InvalidateCache
    Call ISO16889Mod.ISO16889ReportData.CalculateBetaSizes
    
    ' Update the SaveData table with new beta size values
    Call ISO16889Mod.ManageISO16889SaveData(9, "SET_DATA", ISO16889Mod.ISO16889ReportData.ISO16889SizeAtBeta2)
    Call ISO16889Mod.ManageISO16889SaveData(10, "SET_DATA", ISO16889Mod.ISO16889ReportData.ISO16889SizeAtBeta10)
    Call ISO16889Mod.ManageISO16889SaveData(11, "SET_DATA", ISO16889Mod.ISO16889ReportData.ISO16889SizeAtBeta75)
    Call ISO16889Mod.ManageISO16889SaveData(12, "SET_DATA", ISO16889Mod.ISO16889ReportData.ISO16889SizeAtBeta100)
    Call ISO16889Mod.ManageISO16889SaveData(13, "SET_DATA", ISO16889Mod.ISO16889ReportData.ISO16889SizeAtBeta200)
    Call ISO16889Mod.ManageISO16889SaveData(14, "SET_DATA", ISO16889Mod.ISO16889ReportData.ISO16889SizeAtBeta1000)
    
    Debug.Print "Beta size values updated for sensor: " & newSensor
    
CleanupEvents:
    Call EndAutomatedUpdate
    If Err.Number <> 0 Then
        MsgBox "Error updating beta values: " & Err.Description, vbCritical
        Debug.Print "ERROR in UpdateBetaValuesForSensorChange: " & Err.Description
    End If
End Sub

'======================================================================
'================== USER INTERACTION AND LOGGING ====================
'======================================================================

' Simple rebuild prompt - let user decide
Private Sub PromptForRebuildIfNeeded(changeType As String)
    Dim result As VbMsgBoxResult
    
    result = MsgBox("Your " & changeType & " change affects the analysis." & vbCrLf & _
                   "Rebuild analysis now?", vbYesNo + vbQuestion, "Rebuild Analysis?")
    
    If result = vbYes Then
        Call ISO16889Mod.ForceRebuildAnalysis
    End If
End Sub

' Prompt for sensor change (no rebuild needed)
Private Sub PromptForSensorChange(newSensor As String)
    Dim result As VbMsgBoxResult
    
    result = MsgBox("Change particle counter sensor to " & newSensor & "?" & vbCrLf & _
                   "This will update report displays but does not require rebuilding analysis.", _
                   vbYesNo + vbQuestion, "Sensor Change")
    
    If result = vbYes Then
        MsgBox "Sensor selection updated. Report displays will now use " & newSensor & " data.", vbInformation
    End If
End Sub

' Prompt user for rebuild when critical parameters change
Private Sub PromptForISO16889Rebuild(changeType As String)
    Dim result As VbMsgBoxResult
    
    result = MsgBox("Your " & changeType & " change requires rebuilding ISO 16889 analysis." & vbCrLf & _
                   "Rebuild now?", vbYesNo + vbQuestion, "Rebuild Required")
    
    If result = vbYes Then
        Call ISO16889Mod.ForceRebuildAnalysis
    End If
End Sub

' Simplified audit trail logging
Private Sub LogDataChange(changeType As String, ID As Long, newValue As Variant, isISO16889 As Boolean)
    Dim tableType As String
    tableType = IIf(isISO16889, "ISO16889", "SaveData")
    Debug.Print Now & " - " & tableType & " ID " & ID & " - " & changeType & " = " & newValue
End Sub

' Mark template as modified
Private Sub MarkTemplateAsModified()
    ' Could set a flag or update a timestamp
    ' ThisWorkbook.CustomDocumentProperties("TemplateModified") = True
    Debug.Print "Template marked as modified"
End Sub
